{"env_info": "sys.platform: win32\nPython: 3.9.16 (main, Jan 11 2023, 16:16:36) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3080 Ti\nCUDA_HOME: C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4\nNVCC: Cuda compilation tools, release 11.4, V11.4.48\nMSVC: \u7528\u4e8e x64 \u7684 Microsoft (R) C/C++ \u4f18\u5316\u7f16\u8bd1\u5668 19.29.30143 \u7248\nGCC: n/a\nPyTorch: 1.12.1\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: MSVC 192829924\nMMCV CUDA Compiler: 11.3\nMMClassification: 0.25.0+", "seed": 1537306172, "mmcls_version": "0.25.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(\n        type='ResNet',\n        depth=18,\n        num_stages=4,\n        out_indices=(3, ),\n        style='pytorch'),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=5,\n        in_channels=512,\n        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),\n        topk=(1, )))\ndataset_type = 'ImageNet'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='RandomResizedCrop', size=224),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Resize', size=(256, -1)),\n    dict(type='CenterCrop', crop_size=224),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=32,\n    workers_per_gpu=2,\n    train=dict(\n        type='CustomDataset',\n        data_prefix='../datasets/flower_dataset_split/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='RandomResizedCrop', size=224),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ]),\n    val=dict(\n        type='CustomDataset',\n        data_prefix='../datasets/flower_dataset_split/val',\n        ann_file='../datasets/flower_dataset_split/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1)),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]),\n    test=dict(\n        type='CustomDataset',\n        data_prefix='../datasets/flower_dataset_split/val',\n        ann_file='../datasets/flower_dataset_split/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1)),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(interval=1, metric='accuracy')\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', step=[30, 60, 90])\nrunner = dict(type='EpochBasedRunner', max_epochs=5)\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=20, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'resnet18_8xb32_in1k_20210831-fbbb1da6.pth'\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs\\resnet18_8xb32_in1k_yyh'\ngpu_ids = [0]\ndevice = 'cuda'\nseed = 1537306172\n", "CLASSES": ["daisy", "dandelion", "rose", "sunflower", "tulip"]}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.005, "memory": 836, "data_time": 0.33106, "loss": 1.0337, "time": 0.51562}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.005, "memory": 836, "data_time": 0.05137, "loss": 0.40884, "time": 0.07641}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 0.005, "memory": 836, "data_time": 0.05805, "loss": 0.43542, "time": 0.0794}
{"mode": "val", "epoch": 1, "iter": 18, "lr": 0.005, "accuracy_top-1": 87.76224, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.005, "memory": 836, "data_time": 0.107, "loss": 0.37258, "time": 0.14793}
{"mode": "train", "epoch": 2, "iter": 40, "lr": 0.005, "memory": 836, "data_time": 0.0121, "loss": 0.34182, "time": 0.03735}
{"mode": "train", "epoch": 2, "iter": 60, "lr": 0.005, "memory": 836, "data_time": 0.0113, "loss": 0.35254, "time": 0.03635}
{"mode": "val", "epoch": 2, "iter": 18, "lr": 0.005, "accuracy_top-1": 91.78322, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.005, "memory": 836, "data_time": 0.10686, "loss": 0.2291, "time": 0.14296}
{"mode": "train", "epoch": 3, "iter": 40, "lr": 0.005, "memory": 836, "data_time": 0.0137, "loss": 0.26439, "time": 0.03575}
{"mode": "train", "epoch": 3, "iter": 60, "lr": 0.005, "memory": 836, "data_time": 0.011, "loss": 0.2378, "time": 0.036}
{"mode": "val", "epoch": 3, "iter": 18, "lr": 0.005, "accuracy_top-1": 94.75525, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.005, "memory": 836, "data_time": 0.10656, "loss": 0.27831, "time": 0.14306}
{"mode": "train", "epoch": 4, "iter": 40, "lr": 0.005, "memory": 836, "data_time": 0.014, "loss": 0.25389, "time": 0.038}
{"mode": "train", "epoch": 4, "iter": 60, "lr": 0.005, "memory": 836, "data_time": 0.0111, "loss": 0.21237, "time": 0.03695}
{"mode": "val", "epoch": 4, "iter": 18, "lr": 0.005, "accuracy_top-1": 92.65734, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.005, "memory": 836, "data_time": 0.10701, "loss": 0.27521, "time": 0.14135}
{"mode": "train", "epoch": 5, "iter": 40, "lr": 0.005, "memory": 836, "data_time": 0.0155, "loss": 0.21566, "time": 0.03725}
{"mode": "train", "epoch": 5, "iter": 60, "lr": 0.005, "memory": 836, "data_time": 0.0134, "loss": 0.2767, "time": 0.03675}
{"mode": "val", "epoch": 5, "iter": 18, "lr": 0.005, "accuracy_top-1": 93.88112, "accuracy_top-5": 100.0}